@mixin dim-items($perc: .4) {
  &:hover > * {
     opacity: $perc;
  }

  & > * {
     display: block;
     transition: opacity 0.2s ease-out 0.02s;

     &:hover {
        opacity: 1 !important;
     }
  }
}

@mixin dim($perc: .4) {
  transition: opacity .2s ease-out 0.02s;

  &:hover {
     opacity: $perc;
     text-decoration: none;
  }
}

.dim {
  @include dim;
}
.dim-items {
  @include dim-items;
}


@function map-get-or-key($map, $key) {
	@if map-has-key($map, $key) or map-has-key($map, -$key) {
		@if $key != 'auto' and type-of($key) == 'number' and $key < 0 {
			@return 0 - map-get($map, -$key);
		} @else {
			@return map-get($map, $key);
		}
	} @else if type-of($key) == 'string' {
		@return unquote($key);
	} @else {
		@return $key;
	}
}

@function bsize($key) {
	@return map-get-or-key($spacers, $key);
}


@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

$min_width: 576px;
$max_width: 1800px;
$min_font: 16px;
$max_font: 24px;

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {

      font-size: $min-font-size;
      @media screen and (min-width: $min-vw) {
        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }

      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}

@mixin isFlex($align: center, $justify: center, $direction: row, $wrap: wrap) {
  display: flex;
  align-items: $align;
  justify-content: $justify;
  flex-direction: $direction;
  flex-wrap: $wrap;
}

@mixin bgImage($url, $repeat: no-repeat, $position: center, $size: initial) {
  background-image: url($url);
  background-repeat: $repeat;
  background-position: $position;
  background-size: $size;
}

// Text antialiasing
// --------------------------------------------------------------------------
@mixin antialiasing {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin no-antialiasing {
  -webkit-font-smoothing: subpixel-antialiased;
  -moz-osx-font-smoothing: auto;
}

@mixin item-shadow {
  -webkit-box-shadow: 5px 5px 24px -5px rgba(0,0,0,0.31);
  -moz-box-shadow: 5px 5px 24px -5px rgba(0,0,0,0.31);
  box-shadow: 5px 5px 24px -5px rgba(0,0,0,0.31);
}

.item-shadow {
  @include item-shadow;
}

//--------------------
// SCSS MIXINS
//--------------------

@mixin mq($name) {
    $min: breakpoint-min($name, $breakpoints);
    @if $min {
        @media (min-width: $min) {
            @content;
        }
    } @else {
        @content;
    }
}

@mixin mq-down($name) {
    $min: breakpoint-min($name, $breakpoints);
    @if $min {
        @media (max-width: ($min - 1px)) {
            @content;
        }
    } @else {
        @content;
    }
}

@mixin hover-focus {
    &:hover,
    &:focus {
        @content;
    }
}

@mixin sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
}

@mixin sr-only-focusable {
    &:active,
    &:focus {
        position: static;
        width: auto;
        height: auto;
        overflow: visible;
        clip: auto;
        white-space: normal;
    }
}

@mixin hyphenate() {
    word-wrap: break-word;
    overflow-wrap: break-word;
    hyphens: auto;
}

@mixin coverall() {
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
}

@mixin scrollable() {
    overflow-y: auto;
    -webkit-overflow-scrolling: touch;
}

@mixin button-reset() {
    border: 0;
    padding: 0;
    background-color: transparent;
    -webkit-appearance: none;
}

@mixin center {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}
